== The HTTP request router

The router is the component that translates each incoming HTTP request to an action call. The HTTP request contains two major pieces of information:

1. the request path (such as +/foo/1234+, +/photos/+), including the query string (the part after the +?+ in the url).
2. the HTTP method (GET, POST, ...).

Routes are defined directly on the action method with the +@Route+ annotation.

=== The @Route annotation

The +@Route+ annotation contains two attributes: the HTTP method and the URI pattern determining on which URLs the action is associated.

Let's see a couple of examples:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/photos")
@Route(method=HttpMethod.GET, uri="/photos/{id}")
@Route(method=HttpMethod.POST, uri="/photos/")
@Route(method=HttpMethod.DELETE, uri="/photos/{id}")
----

=== The HTTP method
The HTTP method can be any of the valid methods supported by HTTP (mainly GET, POST, PUT,
DELETE). They are defined in +org.wisdom.api.http.HttpMethod+.

=== The URI pattern
The URI pattern defines the routeâ€™s request path. Some parts of the request path can be dynamic.

==== Static path
For example, to exactly match +GET /photos+ incoming requests, you can define this route:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/photos")
----

==== Dynamic parts
If you want to define a route that, say, retrieves a photo by id, you need to add a dynamic part, filled by the router:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/photos/{id}")
----

NOTE: URI patterns may have more than one dynamic part such as in +/foo/{id}/{name}+.

The default matching strategy for a dynamic part is defined by the regular expression defined as +{id}+ will match
exactly one URI path segment.

==== Dynamic parts spanning several path segments
If you want a dynamic part to capture more than one URI path segment, separated by slashes, you can define a dynamic
part using the +{path*}+ syntax:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/assets/{path*}")
----

Here, for a request like +GET /assets/stylesheets/style.css+, the name dynamic part will capture the
+stylesheets/style.css+ value.

NOTE: +{path*}+ scheme accepts empty input. To avoid this, use +{path{plus}}+.

==== Dynamic parts with custom regular expressions
You can also define your own regular expression for a dynamic part, using the +{id<regex>}+ syntax:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/photos/{id<[0-9]+>}")
----

=== Controller's path
Often the actions of one controller starts with a common prefix, such as +/photos+. To avoid the repetition,
you can use the +@Path+ annotation indicating the common prefix prepended to all uris from the +@Route+.

[source, java]
----
include::{sourcedir}/controllers/PhotoController.java[tags=controller]
----

=== Action Parameters
Action methods can receive parameters. Three types of parameters are supported:

1. parameter from the query part of the url or from the dynamic part of the uri. These parameters are annotated
 with +@Parameter+
2. attribute from the request body (for +POST+ requests). These parameters are annotated with +@Attribute+
3. object built from the request body (for +POST+ requests). These parameters are annotated with +@Body+

All action method parameters must be annotated with one of the three annotations.

==== @Parameter

The +@Parameter+ annotation indicates that the marked method parameter takes a values from either the query part of
the method, or a dynamic part of the URI.

In the following example, the +id+ value is computed from the URL. For instance,
+http://localhost:9000/parameters/foobar+ would set id to +foobar+.

[source, java]
----
include::{sourcedir}/controllers/Parameters.java[tags=path-parameter]
----

Using query parameter is also simple:

[source, java]
----
include::{sourcedir}/controllers/Parameters.java[tags=query-parameter]
----

With the previous snippet, and the URL +http://localhost:9000/parameters/?id=foo+, +id+ would be set to +foo+.

IMPORTANT: Parameter's type can be String, boolean or integer.

==== @Attribute

the +@Attribute+ annotation retrieves its value from the request body. As a consequence it is only usable for request
 using the +POST+ and +PUT+ method. +@Attribute+ are useful to retrieve form data in an unstructured way.

[source, java]
----
include::{sourcedir}/controllers/Attributes.java[tags=attributes]
----

In the previous snippet, two attributes can received by the action method: +id+ and +name+. A form sending such data
as +application/x-www-form-urlencoded+ will be handled directly.

IMPORTANT: Attribute's type can be String, boolean, integer or +FileItem+ (for file upload).

==== @Body

The last annotation let you wrap the request into an object. This object must be either a bean or have +public+
attributes.

For instance, let's imagine I need to manage object of the following class:

[source, java]
----
include::{sourcedir}/controllers/MyData.java[tags=data]
----

I don't want to build my object myself, luckily Wisdom handles that for me:

[source, java]
----
include::{sourcedir}/controllers/BodyWrap.java[tags=controller]
----

The +@Body+ annotation build an object of the parameter's type using the request content and parameters. It because
very handy when handling JSON data, or complex form.

=== Declaring routes without @Route

If for some reason the +@Route+ annotation does not meet your requirements, you can override the +routes()+ method.
This method let you define a set of routes. These routes are *not* prefixed by the +@Path+ prefix,
and can target other controllers.

[source, java, indent=0]
----
include::{sourcedir}/controllers/Routes.java[tags=routes]
----

Wisdom provides a +RouteBuilder+ that let you define +Route+ easily.

=== Route Conflict

Because there is no central location where routes are defined (as it breaks modularity),
conflict may happen. Wisdom tries to detect them when the application is deployed, however,
the detection algorithm is limited. We recommend using different prefix to avoid conflicts.

=== Accessing the router

The Wisdom router is exposed as an OSGi service. Don't worry it does not bite. Your controller can access it as
follows:

[source, java]
----
include::{sourcedir}/controllers/RouterExample.java[tags=router]
----

The router let you find routes by yourself, invoke them, check their parameters... In addition,
it supports _reverse routing_.

IMPORTANT: Wisdom is based on http://ipojo.org[Apache Felix iPOJO]. All iPOJO features are available in Wisdom.

=== Reverse routing
The router can be used to generate a URL from within your code. Thus, refactoring is made easier.

[source, java]
----
include::{sourcedir}/controllers/RouterExample.java[tags=reverse]
----

Invoking the defined action returns:
----
/photo/
/photo/1
----

Reverse routing can let you generate redirect results on actions you don't know the url:

[source, java]
----
include::{sourcedir}/controllers/RouterExample.java[tags=redirect]
----

