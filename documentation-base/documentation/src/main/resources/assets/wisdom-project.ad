== The Wisdom Project

The Wisdom Framework is an open source project licensed under the http://www.apache.org/licenses/LICENSE-2.0
.html[Apache License 2.0].

All contributions are welcome !

=== Source Code

The source code is hosted on GitHub: https://github.com/wisdom-framework/wisdom/.

=== Bug Tracker

The Wisdom Project is using the GitHub Issue Tracker: https://github.com/wisdom-framework/wisdom/issues.

=== Continuous Integration

Wisdom is built on the continuous integration server of dynamis-technologies.

=== Building Wisdom

To build Wisdom you need Apache Maven 3.2.1+. The Wisdom build is divided in several profiles:

----
mvn clean install -Pcore => Wisdom Core modules
mvn clean install -Pframework => Wisdom Server
mvn clean install -Pextensions => A couple of extensions
mvn clean install -Pdocumentation => Documentation and Samples
----

To skip the tests, append the +-DskipTests+ option to the command line.

As tests are being executed in a Wisdom server, you may experience some timing issue. If it's the case,
try setting the +TIME_FACTOR+ to extend the _wait_ durations:

----
mvn clean install -Pfull-runtime -DTIME_FACTOR=2
----

TIP: *Time Factor*: The time factor extends the time waited to determine whether a service is published or not. It is
 also used to detect the _Stability_ of the platform, _i.e._ when all services and bundles are started.

=== Releasing Wisdom

As Wisdom contains a Maven Plugin used by other project and extending the lifecycle (so called _extension_), the maven-release-plugin cannot be used. This Maven limitation makes the release process a bit cumbersome.

First, check that your +~/.m2/settings.xml+ contains you GPG password when the +release+ profile is activated:

----
<profile>
    <id>release</id>
    <properties>
        <gpg.passphrase>YOUR_PASSPHRASE</gpg.passphrase>
    </properties>
</profile>
----

Then check that your credential to `Sonatype OSS` are written in your +~/.m2/settings.xml+:

----
<server>
	<id>sonatype-nexus-staging</id>
	<username>YOUR_USERNAME</username>
	<password>SECRET</password>
</server>
----

You also need to be sure you have the permission to push to the Wisdom Git repository.

["arabic", start=1]
. Check that you have the latest version, and declare the code freeze.
. Use the maven-versions-plugin to update to the release version:

----
 # We will use this version everywhere:
 export VERSION=enter the released version here
 mvn clean
 mvn versions:set -DdevelopmentVersion=$VERSION
----

["arabic", start=3]
. Be sure that you don't have any `-SNAPSHOT` anymore.
----
 egrep -lir  "(-SNAPSHOT)" .
 # To limit the search to the `pom.xml` file:
 egrep --include=pom.xml -lr "(-SNAPSHOT)" .
----

["arabic", start=4]
. Let's now check that everything is fine:
----
mvn verify -Prelease,core -Dmaven.repo.local=$HOME/tmp/repo-for-$VERSION
mvn verify -Prelease,framework,extensions,documentation -Dmaven.repo.local=$HOME/tmp/repo-for-$VERSION
----

If everything is fine, continue, else rollback. It's generally recommended to check that the artifact are correctly signed with GPG.

["arabic", start=5]
. Commit the updated pom files, create a tag, and push.
----
git commit **/pom.xml -m "[RELEASE] update to release version: $VERSION"
git push origin master
git tag -a wisdom-framework-$VERSION -m "Create tag for release $VERSION"
git push origin wisdom-framework-$VERSION
----

["arabic", start=6]
. The tag is created, we are going to bump to the version to the next development version:
----
export NEW_VERSION=enter the new version here
mvn clean
mvn versions:set -DdevelopmentVersion=$NEW_VERSION
git commit **/pom.xml -m "[RELEASE] update to development version: $NEW_VERSION"
git push origin master
----

What you did so far is the equivalent to the `mvn release:prepare`. It's now time to `perform` the release, so building the released artifacts.

["arabic", start=7]
. Checkout the tag we created

----
git fetch
git tag -l
git checkout tags/wisdom-framework-$VERSION
----

["arabic", start=8]
. Let's build and deploy the release, as everything has been checked before we can safely skip the tests:

----
mvn deploy -Prelease,core
mvn deploy -Prelease,framework,extensions,documentation
----

["arabic", start=9]
. When done, open a browser to https://oss.sonatype.org/, and log in.
. On the left sidebar, go to 'Staging Repositories', and find the created repository.
. Select it, and click on the `close` button. A couple of checks are performed, such as checking that all the expected artifacts are available, and that all artifacts are correctly signed.
. Once done, re-check the repository and click on the 'release' button.
. Wait until the artifacts lands in Maven Central.
. Announce the release on the `wisdom-discuss` mailing list. Don't forget to integrate the release notes. These releases notes can be computed from the Github Issue Tracker.
. On the Github Issue Tracker, don't forget to create a new milestone for the next release, and decide which issues are going to be fixed in this new release.

If you reach this point, you made it ! Congratulations !
